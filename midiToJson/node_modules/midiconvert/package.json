{
  "_args": [
    [
      {
        "raw": "git+https://git@github.com/Tonejs/MidiConvert.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://git@github.com/Tonejs/MidiConvert.git",
        "spec": "git+https://git@github.com/Tonejs/MidiConvert.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:Tonejs/MidiConvert.git",
          "sshUrl": "git+ssh://git@github.com/Tonejs/MidiConvert.git",
          "httpsUrl": "git+https://git@github.com/Tonejs/MidiConvert.git",
          "gitUrl": "git://git@github.com/Tonejs/MidiConvert.git",
          "shortcut": "github:Tonejs/MidiConvert",
          "directUrl": "https://git@raw.githubusercontent.com/Tonejs/MidiConvert/master/package.json"
        }
      },
      "C:\\Users\\Brian Rasmussen\\cs478\\group\\midiToJson"
    ]
  ],
  "_from": "git+https://git@github.com/Tonejs/MidiConvert.git",
  "_id": "midiconvert@0.4.3",
  "_inCache": true,
  "_location": "/midiconvert",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://git@github.com/Tonejs/MidiConvert.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://git@github.com/Tonejs/MidiConvert.git",
    "spec": "git+https://git@github.com/Tonejs/MidiConvert.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:Tonejs/MidiConvert.git",
      "sshUrl": "git+ssh://git@github.com/Tonejs/MidiConvert.git",
      "httpsUrl": "git+https://git@github.com/Tonejs/MidiConvert.git",
      "gitUrl": "git://git@github.com/Tonejs/MidiConvert.git",
      "shortcut": "github:Tonejs/MidiConvert",
      "directUrl": "https://git@raw.githubusercontent.com/Tonejs/MidiConvert/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://git@github.com/Tonejs/MidiConvert.git#ab5ff7051b4cac4a3030f848e64a91830e7d45e1",
  "_shasum": "5d72b717b932d654650acf59f4ca73023057d5ac",
  "_shrinkwrap": null,
  "_spec": "git+https://git@github.com/Tonejs/MidiConvert.git",
  "_where": "C:\\Users\\Brian Rasmussen\\cs478\\group\\midiToJson",
  "author": {
    "name": "Yotam Mann"
  },
  "bugs": {
    "url": "https://github.com/Tonejs/MidiConvert/issues"
  },
  "dependencies": {
    "jsmidgen": "^0.1.5",
    "midi-file-parser": "^1.0.0"
  },
  "description": "Convert binary midi into Tone.js-friendly JSON",
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-loader": "7",
    "babel-preset-es2015": "6.24.1",
    "chai": "^3.3.0",
    "codecov": "^1.0.1",
    "mocha": "^3.2.0",
    "nyc": "^10.0.0",
    "webpack": "2"
  },
  "gitHead": "ab5ff7051b4cac4a3030f848e64a91830e7d45e1",
  "homepage": "https://tonejs.github.com/MidiConvert/",
  "license": "MIT",
  "main": "build/MidiConvert.js",
  "module": "src/MidiConvert.js",
  "name": "midiconvert",
  "optionalDependencies": {},
  "readme": "# MidiConvert #\r\n\r\n[![Build Status](https://travis-ci.org/Tonejs/MidiConvert.svg?branch=master)](https://travis-ci.org/Tonejs/MidiConvert)\r\n[![codecov](https://codecov.io/gh/Tonejs/MidiConvert/branch/master/graph/badge.svg)](https://codecov.io/gh/Tonejs/MidiConvert)\r\n\r\n## [DEMO](https://tonejs.github.io/MidiConvert/)\r\n\r\nMidiConvert makes it straightforward to work with MIDI files in Javascript. It uses [midi-file-parser](https://github.com/NHQ/midi-file-parser) to decode MIDI files and [jsmidgen](https://github.com/dingram/jsmidgen) to encode MIDI files.\r\n\r\n\r\n```javascript\r\n// load a midi file\r\nMidiConvert.load(\"path/to/midi.mid\", function(midi) {\r\n  console.log(midi)\r\n})\r\n```\r\n\r\n### Format\r\n\r\nThe data parsed from the midi file looks like this:\r\n\r\n```javascript\r\n{\r\n  // the transport and timing data\r\n  header: {\r\n    name: String,                     // the name of the first empty track, \r\n                                      // which is usually the song name\r\n    bpm: Number,                      // the tempo, e.g. 120\r\n    timeSignature: [Number, Number],  // the time signature, e.g. [4, 4],\r\n    PPQ: Number                       // the Pulses Per Quarter of the midi file\r\n  },\r\n\r\n  startTime: Number,                  // the time before the first note plays\r\n  duration: Number,                   // the time until the last note finishes\r\n\r\n  // an array of midi tracks\r\n  tracks: [\r\n    {\r\n      id: Number,                     // the position of this track in the array\r\n      name: String,                   // the track name if one was given\r\n      notes: [\r\n        {\r\n          midi: Number,               // midi number, e.g. 60\r\n          time: Number,               // time in seconds\r\n          note: String,               // note name, e.g. \"C4\"\r\n          velocity: Number,           // normalized 0-1 velocity\r\n          duration: Number,           // duration between noteOn and noteOff\r\n        }\r\n      ],\r\n\r\n      startTime: Number,              // the time before the first note plays\r\n      duration: Number,               // the time until the last note finishes\r\n\r\n      // midi control changes\r\n      controlChanges: {\r\n        // if there are control changes in the midi file\r\n        '91': [\r\n          {\r\n            number: Number,           // the cc number\r\n            time: Number,             // time in seconds\r\n            value: Number,            // normalized 0-1\r\n          }\r\n        ],\r\n      },\r\n\r\n      isPercussion: Boolean,          // true if this track is on a percussion\r\n                                      // channel\r\n      channelNumber: Number,          // the ID for this channel; 9 and 10 are\r\n                                      // reserved for percussion\r\n\r\n      instrumentNumber: Number,       // the ID for this instrument, as defined\r\n                                      // by the MIDI spec\r\n      instrumentFamily: String,       // the name of this instrument's family,\r\n                                      // as defined by the MIDI spec\r\n      instrument: String,             // the instrument name, as defined by the\r\n                                      // MIDI spec\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Raw Midi Parsing\r\n\r\nIf you are using Node.js or have the raw binary string from the midi file, just use the `parse` method:\r\n\r\n```javascript\r\nfs.readFile(\"test.mid\", \"binary\", function(err, midiBlob) {\r\n  if (!err) {\r\n    var midi = MidiConvert.parse(midiBlob)\r\n  }\r\n})\r\n```\r\n\r\n### Encoding Midi\r\n\r\nYou can also create midi files from scratch or by modifying an existing file.\r\n\r\n```javascript\r\n// create a new midi file\r\nvar midi = MidiConvert.create()\r\n// add a track\r\nmidi.track()\r\n  // select an instrument by its MIDI patch number\r\n  .patch(32)\r\n  // chain note events: note, time, duration\r\n  .note(60, 0, 2)\r\n  .note(63, 1, 2)\r\n  .note(60, 2, 2)\r\n\r\n// write the output\r\nfs.writeFileSync(\"output.mid\", midi.encode(), \"binary\")\r\n```\r\n\r\n### Tone.Part\r\n\r\nThe note data can be easily passed into [Tone.Part](http://tonejs.github.io/docs/#Part)\r\n\r\n```javascript\r\nvar synth = new Tone.PolySynth(8).toMaster()\r\n\r\nMidiConvert.load(\"path/to/midi.mid\", function(midi) {\r\n\r\n  // make sure you set the tempo before you schedule the events\r\n  Tone.Transport.bpm.value = midi.header.bpm\r\n\r\n  // pass in the note events from one of the tracks as the second argument to Tone.Part \r\n  var midiPart = new Tone.Part(function(time, note) {\r\n\r\n    //use the events to play the synth\r\n    synth.triggerAttackRelease(note.name, note.duration, time, note.velocity)\r\n\r\n  }, midi.tracks[0].notes).start()\r\n\r\n  // start the transport to hear the events\r\n  Tone.Transport.start()\r\n})\r\n```\r\n\r\n### Acknowledgment\r\n\r\nMidiConvert uses [midi-file-parser](https://github.com/NHQ/midi-file-parser) which is ported from [jasmid](https://github.com/gasman/jasmid) for decoding MIDI data and and [jsmidgen](https://github.com/dingram/jsmidgen) for encoding MIDI data.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Tonejs/MidiConvert.git"
  },
  "scripts": {
    "build": "yarn run clean; $( yarn bin )/webpack -p",
    "clean": "rm -rf ./build/*; mkdir -p ./build/",
    "posttest": "$( yarn bin )/nyc report --reporter=json && $( yarn bin )/codecov -f coverage/*.json",
    "pretest": "yarn run clean; $( yarn bin )/webpack",
    "test": "$( yarn bin )/nyc $( yarn bin )/mocha ./test/test.js"
  },
  "types": "src/MidiConvert.d.ts",
  "version": "0.4.3"
}
